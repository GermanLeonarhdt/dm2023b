library(rstudioapi)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(fpp2)
library(rstudioapi)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(fpp2)
class(goog)
library(rstudioapi)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(fpp2)
class(goog)
length(goog)
plot.ts(goog, col = "purple", xlab = "Tiempo", ylab = "Precios")
lamb <- BoxCox.lambda(goog)
lamb
googBC <- BoxCox(goog, lambda = lamb)
sto <- autoplot(goog, color = "royalblue", main =  "Serie de tiempo original", xlab = "", ylab = "") +
theme_hc() +
theme(plot.title = element_text(hjust = 0.5))
stt <- autoplot(googBC, color = "purple", main =  "Serie de tiempo transformada", xlab = "", ylab = "") +
theme_hc() +
theme(plot.title = element_text(hjust = 0.5))
grid.arrange(sto, stt, ncol = 1)
goog_semanal <- ts(goog, frequency = 5)
good_da <- decompose(goog_semanal, type = "additive")
autoplot(good_da) +
geom_line(color = "violet") +
ggtitle("Descomposición aditiva") +
theme_hc() +
theme(plot.title = element_text(hjust = 0.5))
good_dm <- decompose(goog_semanal, type = "multiplicative")
autoplot(good_dm) +
geom_line(color = "violet") +
ggtitle("Descomposición multiplicativa") +
theme_hc() +
theme(plot.title = element_text(hjust = 0.5))
options(width = 55) #mejora la visual de la salida
goog_semanal[1:10]
goog_entrenamiento <- window(goog_semanal, end = c(198,5))
goog_prueba <- window(goog_semanal, start = c(199,1))
# Parámetro 0.2
goog_ses02 <- ses(goog_entrenamiento,
alpha = 0.2,
h = 50)
autoplot(goog_ses02, main = expression(paste("Suavizado exponencial simple con ", gamma==0.2)), ylab = "", xlab = "Tiempo")
# Parámetro 0.5
goog_ses05 <- ses(goog_entrenamiento,
alpha = 0.5,
h = 50)
autoplot(goog_ses05, main = expression(paste("Suavizado exponencial simple con ", gamma==0.5)), ylab = "", xlab = "Tiempo")
# Parámetro 0.8
goog_ses08 <- ses(goog_entrenamiento,
alpha = 0.8,
h = 50)
autoplot(goog_ses08, main = expression(paste("Suavizado exponencial simple con ", gamma==0.8)), ylab = "", xlab = "Tiempo")
goog_dif <- diff(goog_semanal)
autoplot(goog_dif, color = "royalblue", xlab = "Tiempo", ylab = "Precios diferenciados")
goog_entrenamiento_dif <- diff(goog_entrenamiento)
goog_prueba_dif <- diff(goog_prueba)
goog_dif_ses <- ses(goog_entrenamiento_dif,
alpha = 0.5,
h = 50)
autoplot(goog_dif_ses, main = "Suavizado exponencial simple luego de diferenciación", ylab = "", xlab = "Tiempo")
options(width = 80)
accuracy(goog_ses02, goog_prueba)[,c(2,7)]
accuracy(goog_ses05, goog_prueba)[,c(2,7)]
accuracy(goog_ses08, goog_prueba)[,c(2,7)]
accuracy(goog_dif_ses, goog_prueba_dif)[, c(2,7)]
# Damos distintos valores al parámetro
gama <- seq(.01, .99, by = .01)
# Inicializamos el vector que guardará RMSE
RMSE <- NA
# Calculamos RMSE para cada modelo
for(i in seq_along(gama)) {
modelo <- ses(goog_entrenamiento_dif, alpha = gama[i],
h = 50)
RMSE[i] <- accuracy(modelo, goog_prueba_dif)[2,2]
}
sesRMSE <- data.frame(Parámetro = gama, RMSE = RMSE)
sesRMSE
par_opt <- filter(sesRMSE, RMSE == min(RMSE))
par_opt
ggplot(sesRMSE, aes(x = Parámetro, y = RMSE)) +
geom_line(color = "purple") +
geom_point(data = par_opt, aes(x = Parámetro, y = RMSE), size = 2, color = "magenta")
ses_opt <- ses(goog_entrenamiento_dif, alpha = par_opt$Parámetro, h = 10)
autoplot(goog_prueba_dif, xlab = "Tiempo", ylab = "Precios diferenciados", size = 1) +
autolayer(ses_opt, alpha = .5) +
ggtitle("Predicciones versus valores reales de la serie de tiempo ") +
theme_hc() +
theme(plot.title = element_text(hjust = 0.5))
checkresiduals(ses_opt)
options(width = 80) # mejora la visual de la salida
accuracy(ses_opt, goog_prueba_dif)
PP.test(goog_semanal)
PP.test(goog_dif)
library(tseries)
kpss.test(goog_semanal)
kpss.test(goog_dif)
Acf(goog_dif, lag.max = 15, type = "partial", main = "")
options(width = 80) # mejora la visual de la salida
AIC_AR <- vector()
for (p in 1:15){
modelo <- arima(goog_entrenamiento_dif, order = c(p,0,0))
AIC_AR[p] <- modelo$aic
}
AIC_AR
AIC_AR <- data.frame(Órden = 1:15, AIC = AIC_AR)
minAIC_AR <- filter(AIC_AR, AIC == min(AIC))
minAIC_AR
ggplot(AIC_AR, aes(x = Órden, y = AIC)) +
geom_line(color = "purple") +
geom_point(data = minAIC_AR, aes(x = Órden, y = AIC), size = 2, color = "magenta")
AR <- arima(goog_entrenamiento_dif, order = c(4,0,0), method = "ML")
round(summary(AR)$coef, 4)
predAR <- forecast(AR, h = 10)
options(width = 80) # mejora la visual de la salida
accuracy(predAR, goog_prueba_dif)
plotAR <- autoplot(predAR, xlab = "Tiempo", ylab = "Precios diferenciados", size = 1) +
theme_hc() +
theme(plot.title = element_text(size = 10, hjust = 0.5),
axis.title = element_text(size = 10),
axis.text = element_text(size = 10))
plotARzoom <- autoplot(goog_prueba_dif, xlab = "Tiempo", ylab = "Precios diferenciados", size = 1) +
autolayer(predAR, alpha = .5) +
ggtitle("Predicciones vs. valores reales")  +
theme_hc() +
theme(plot.title = element_text(size = 10, hjust = 0.5),
axis.title = element_text(size = 10),
axis.text = element_text(size = 10))
grid.arrange(plotAR, plotARzoom, ncol = 2)
checkresiduals(AR)
Acf(goog_dif, lag.max = 15, type = "correlation", main = "")
options(width = 80) # mejora la visual de la salida
AIC_MA <- vector()
for (q in 1:15){
modelo <- arima(goog_entrenamiento_dif, order = c(0,0,q))
AIC_MA[q] <- modelo$aic
}
AIC_MA
AIC_MA <- data.frame(Órden = 1:15, AIC = AIC_MA)
minAIC_MA <- filter(AIC_MA, AIC == min(AIC))
minAIC_MA
ggplot(AIC_MA, aes(x = Órden, y = AIC)) +
geom_line(color = "purple") +
geom_point(data = minAIC_MA, aes(x = Órden, y = AIC), size = 2, color = "magenta")
MA <- arima(goog_entrenamiento_dif, order = c(0,0,4), method = "ML")
round(summary(MA)$coef, 4)
predMA <- forecast(MA, h = 10)
options(width = 80) # mejora la visual de la salida
accuracy(predMA, goog_prueba_dif)
plotMA <- autoplot(predMA, xlab = "Tiempo", ylab = "Precios diferenciados", size = 1) +
theme_hc() +
theme(plot.title = element_text(size = 10, hjust = 0.5),
axis.title = element_text(size = 10),
axis.text = element_text(size = 10))
plotMAzoom <- autoplot(goog_prueba_dif, xlab = "Tiempo", ylab = "Precios diferenciados", size = 1) +
autolayer(predMA, alpha = .5) +
ggtitle("Predicciones vs. valores reales")  +
theme_hc() +
theme(plot.title = element_text(size = 10, hjust = 0.5),
axis.title = element_text(size = 10),
axis.text = element_text(size = 10))
grid.arrange(plotMA, plotMAzoom, ncol = 2)
checkresiduals(MA)
options(width = 80) # mejora la visual de la salida
ARMA <- arima(goog_entrenamiento_dif, order = c(4,0,4), method = "ML")
round(summary(ARMA)$coef, 4)
predARMA <- forecast(ARMA, h = 10)
options(width = 80) # mejora la visual de la salida
accuracy(predARMA, goog_prueba_dif)
plotARMA <- autoplot(predARMA, xlab = "Tiempo", ylab = "Precios diferenciados", size = 1) +
theme_hc() +
theme(plot.title = element_text(size = 10, hjust = 0.5),
axis.title = element_text(size = 10),
axis.text = element_text(size = 10))
plotARMAzoom <- autoplot(goog_prueba_dif, xlab = "Tiempo", ylab = "Precios diferenciados", size = 1) +
autolayer(predARMA, alpha = .5) +
ggtitle("Predicciones vs. valores reales")  +
theme_hc() +
theme(plot.title = element_text(size = 10, hjust = 0.5),
axis.title = element_text(size = 10),
axis.text = element_text(size = 10))
grid.arrange(plotARMA, plotARMAzoom, ncol = 2)
checkresiduals(ARMA)
ARIMA <- arima(goog_entrenamiento, order = c(4,1,4), method = "ML")
round(summary(ARIMA)$coef, 4)
predARIMA <- forecast(ARIMA, h = 10)
options(width = 80) # mejora la visual de la salida
accuracy(predARIMA, goog_prueba)
plotARIMA <- autoplot(predARIMA, xlab = "Tiempo", ylab = "Precios diferenciados", size = 1) +
theme_hc() +
theme(plot.title = element_text(size = 10, hjust = 0.5),
axis.title = element_text(size = 10),
axis.text = element_text(size = 10))
plotARIMAzoom <- autoplot(goog_prueba, xlab = "Tiempo", ylab = "Precios diferenciados", size = 1) +
autolayer(predARIMA, alpha = .5) +
ggtitle("Predicciones vs. valores reales")  +
theme_hc() +
theme(plot.title = element_text(size = 10, hjust = 0.5),
axis.title = element_text(size = 10),
axis.text = element_text(size = 10))
grid.arrange(plotARIMA, plotARIMAzoom, ncol = 2)
checkresiduals(ARIMA)
autoARIMA <- auto.arima(goog_entrenamiento)
summary(autoARIMA)
pred_autoARIMA <- forecast(autoARIMA, h = 10)
options(width = 80) # mejora la visual de la salida
accuracy(pred_autoARIMA, goog_prueba)
plot_autoARIMA <- autoplot(pred_autoARIMA, xlab = "Tiempo", ylab = "Precios diferenciados", size = 1) +
theme_hc() +
theme(plot.title = element_text(size = 10, hjust = 0.5),
axis.title = element_text(size = 10),
axis.text = element_text(size = 10))
plot_autoARIMAzoom <- autoplot(goog_prueba, xlab = "Tiempo", ylab = "Precios diferenciados", size = 1) +
autolayer(pred_autoARIMA, alpha = .5) +
ggtitle("Predicciones vs. valores reales")  +
theme_hc() +
theme(plot.title = element_text(size = 10, hjust = 0.5),
axis.title = element_text(size = 10),
axis.text = element_text(size = 10))
grid.arrange(plot_autoARIMA, plot_autoARIMAzoom, ncol = 2)
checkresiduals(autoARIMA)
Modelo <- c("SES", "AR(4)", "MA(4)", "ARMA(4,4)", "ARIMA(4,1,4)", "AutoARIMA")
AIC <- c(summary(ses_opt)$model$aic, AR$aic, MA$aic, ARMA$aic, ARIMA$aic, autoARIMA$aic)
RMSE <- c(accuracy(ses_opt, goog_prueba_dif)[2,2],
accuracy(predAR, goog_prueba_dif)[2,2],
accuracy(predMA, goog_prueba_dif)[2,2],
accuracy(predARMA, goog_prueba_dif)[2,2],
accuracy(predARIMA, goog_prueba)[2,2],
accuracy(pred_autoARIMA, goog_prueba)[2,2])
MAPE <- c(accuracy(ses_opt, goog_prueba_dif)[2,5],
accuracy(predAR, goog_prueba_dif)[2,5],
accuracy(predMA, goog_prueba_dif)[2,5],
accuracy(predARMA, goog_prueba_dif)[2,5],
accuracy(predARIMA, goog_prueba)[2,5],
accuracy(pred_autoARIMA, goog_prueba)[2,5])
data.frame(Modelo = Modelo, AIC = AIC, RMSE = RMSE, MAPE = MAPE)
# Definimos una función para calcuar el AIC corregido para c=0
AICc <- function(aic, n, p, q){
return(aic + (2 * (p + q + 1) * (p + q + 2)) / (n - p - q - 2))
}
ModeloARIMA <- c("ARIMA(4,1,4)", "ARIMA(0,1,0)")
# Calculamos los AIC corregidos
AICcorregido <- c(AICc(AIC[5], 990, 4, 4), AICc(AIC[6], 990, 0, 0))
# Armamos la salida
data.frame(Modelo = ModeloARIMA, AIC = AIC[5:6], AICc = AICcorregido)
